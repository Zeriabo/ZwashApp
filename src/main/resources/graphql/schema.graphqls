type Station {
  id: ID
  name: String
  address: String
  media: Media
  latitude: Float
  longitude: Float
  programs: [CarWashingProgram]
  createdAt: String
  updatedAt: String
}
 
type CarWashingProgram {
  id: ID
  station: Station
  programType: String
  description: String
  price: Float
  createdAt: String
  updatedAt: String
}

type Media {
  id: ID
  logo: String!
  picture: String!
}

type Booking {
    id: ID
    car: Car
    washingProgram: CarWashingProgram
    station: Station
 
}

type Car {
    id: ID!
    registerationPlate: String!
    manufacture : String!
    dateOfManufacture:String
}
type UserCar {
  token: String
  registerationPlate: String
  manufacture: String
  dateOfManufacture: String
  deviceRegistrationToken: String
}

type UserCarWash {
  booking: Booking
  station: Station
}

type Query {
   # Booking queries
    booking(id: ID!): Booking
    allBookings: [Booking]
    getAllBookings: [Booking!]!
    userBookings(userId: ID!): [Booking]
    getCarBookings(carId: ID!): [Booking]
    
     # car queries
     getCar(id: ID!): Car
     getAllCars : [Car]
 
  # carWashProgram queries
  getAllPrograms(id: ID!): [CarWashingProgram!]!
  
  # Station queries
  getStation(id: ID!): Station!
  getAllStations:[Station!]!
  
   # User queries
   
   #User car wash queries
 getUserCarWashes(userId: ID!): [UserCarWash!]!
 

}

type Mutation {
    createBooking(bookingInput: BookingInput!): Booking
    updateBooking(id: ID!, bookingInput: BookingInput!): Booking
    deleteBooking(id: ID!): Boolean


}

input BookingInput {
    car: ID!
    washingProgram: String!
    userId: ID!
    stationId:ID!

  
}
input UserCarInput {
  token: String
  registerationPlate: String
  manufacture: String
  dateOfManufacture: String
  deviceRegistrationToken: String
}


